
<!DOCTYPE html>
<html>
<head>
  <title>Round Robin Scheduler</title>
  <meta charset="UTF-8">
  <link rel="stylesheet" href="../styles.css">
  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
</head>
<body>

<h2>Enter Process Details</h2>

<table id="processTable">
  <tr>
    <th>프로세스 Process</th>
    <th>도착시간 Arrival Time</th> 
    <th>실행시간 Burst Time</th>
  </tr>
  <tr>
    <td>P1</td>
    <td><input type="text" id="arrival1" value="0"></td>
    <td><input type="text" id="burst1" value="10"></td>
  </tr>
  <tr>
    <td>P2</td>
    <td><input type="text" id="arrival2" value="1"></td>
    <td><input type="text" id="burst2" value="28"></td>
  </tr>
  <tr>
    <td>P3</td>
    <td><input type="text" id="arrival3" value="2"></td>
    <td><input type="text" id="burst3" value="6"></td>
  </tr>
  <tr>
    <td>P4</td>
    <td><input type="text" id="arrival4" value="3"></td>
    <td><input type="text" id="burst4" value="4"></td>
  </tr>
  <tr>
    <td>P5</td>
    <td><input type="text" id="arrival5" value="4"></td>
    <td><input type="text" id="burst5" value="14"></td>
  </tr>
</table>

<h3>Enter Time Quantum</h3>
<input type="text" id="timeQuantum" value="5">

<button onclick="calculate()">Calculate</button>
<button onclick="findBestQuantum()">Find Best Time Quantum</button>

<h2>Results</h2>
<table id="resultsTable">
  <tr>
    <th>프로세스 Process</th>
    <th>반환시간 Turnaround Time</th> 
    <th>대기시간 Waiting Time</th>
  </tr>
</table>

<div id="averages"></div>

<h2>Calculation Details</h2>
<div id="calculationDetails"></div>

<h2>Gantt Chart</h2>
<div id="chart_div"></div>

<script>
  // Load the Visualization API and the timeline package.
  google.charts.load('current', {'packages':['timeline']});
  google.charts.setOnLoadCallback(drawChart);

  // Round Robin algorithm
  function calculate() {
    document.getElementById("resultsTable").innerHTML = "<tr><th>프로세스 Process</th><th>반환시간 Turnaround Time</th><th>대기시간 Waiting Time</th></tr>";
    document.getElementById("calculationDetails").innerHTML = "";

    var timeQuantum = parseInt(document.getElementById("timeQuantum").value);
    var processes = [];
    var chartData = [];
    var results = [];  // to store the results

    for (let i = 1; i <= 5; i++) {
      var arrival = parseInt(document.getElementById("arrival" + i).value);
      var burst = parseInt(document.getElementById("burst" + i).value);

      processes.push({ name: 'P' + i, arrival: arrival, burst: burst, remaining: burst });
    }

    processes.sort((a, b) => a.arrival - b.arrival || a.burst - b.burst);

    var time = processes[0].arrival;
    var totalTurnaround = 0;
    var totalWaiting = 0;

    while (processes.length > 0) {
      var process = processes.shift();
      var executionTime = Math.min(process.remaining, timeQuantum);
      var start = time;
      time += executionTime;
      var end = time;

      // Calculate waiting time as the time spent waiting in the queue
      var waiting = start - (process.lastExecutionEnd || process.arrival);
      process.lastExecutionEnd = end;

      process.remaining -= executionTime;
      if (process.remaining > 0) {
        processes.push(process);
      } else {
        var turnaround = end - process.arrival;
        totalTurnaround += turnaround;
        totalWaiting += waiting;

        // Add to results array instead of directly updating the resultsTable
        results.push({ name: process.name, turnaround: turnaround, waiting: waiting });
      }

      document.getElementById("calculationDetails").innerHTML += `<p>${process.name} : Start - ${start}, End - ${end}, Waiting - ${waiting}</p>`;
      chartData.push([process.name, new Date(0, 0, 0, 0, 0, start), new Date(0, 0, 0, 0, 0, end)]);
    }

    // Sort the results by process name and update the resultsTable
    results.sort((a, b) => a.name.localeCompare(b.name));
    var resultsTable = document.getElementById("resultsTable");
    for (let result of results) {
      var row = resultsTable.insertRow(-1);
      var cell1 = row.insertCell(0);
      var cell2 = row.insertCell(1);
      var cell3 = row.insertCell(2);
      cell1.innerHTML = result.name;
      cell2.innerHTML = result.turnaround;
      cell3.innerHTML = result.waiting;
    }

    var averageTurnaround = totalTurnaround / 5;
    var averageWaiting = totalWaiting / 5;
    document.getElementById("averages").innerHTML = "Average turnaround time: " + averageTurnaround + "<br>Average waiting time: " + averageWaiting;

    drawChart(chartData);
  }

  // Redraw chart when window is resized
  window.addEventListener('resize', drawChart);

  // Drawing chart with given data
  function drawChart(chartData) {
    var chart = new google.visualization.Timeline(document.getElementById('chart_div'));
    var dataTable = new google.visualization.DataTable();
    dataTable.addColumn({ type: 'string', id: 'Process' });
    dataTable.addColumn({ type: 'date', id: 'Start' });
    dataTable.addColumn({ type: 'date', id: 'End' });
    dataTable.addRows(chartData);

    var options = {
      height: 400,
      width: window.innerWidth-20,
      gantt: {
        trackHeight: 30
      }
    };
    chart.draw(dataTable, options);
  }

  // Find the best time quantum that minimizes the average waiting time
  function findBestQuantum() {
    var bestQuantum = 1;
    var bestAvgWaiting = Infinity;
    for (var quantum = 1; quantum <= 30; quantum++) {
      var avgWaiting = simulateRoundRobin(quantum);
      if (avgWaiting < bestAvgWaiting) {
        bestAvgWaiting = avgWaiting;
        bestQuantum = quantum;
      }
    }
    document.getElementById("timeQuantum").value = bestQuantum;
  }

  // Simulate Round Robin with the given time quantum and return the average waiting time
  function simulateRoundRobin(quantum) {
    var processes = [];
    for (let i = 1; i <= 5; i++) {
      var arrival = parseInt(document.getElementById("arrival" + i).value);
      var burst = parseInt(document.getElementById("burst" + i).value);
      processes.push({ name: 'P' + i, arrival: arrival, burst: burst, remaining: burst });
    }

    processes.sort((a, b) => a.arrival - b.arrival || a.burst - b.burst);
    var time = processes[0].arrival;
    var totalWaiting = 0;

    while (processes.length > 0) {
      var process = processes.shift();
      var executionTime = Math.min(process.remaining, quantum);
      time += executionTime;

      process.remaining -= executionTime;
      if (process.remaining > 0) {
        processes.push(process);
      } else {
        var turnaround = time - process.arrival;
        var waiting = turnaround - process.burst;
        totalWaiting += waiting;
      }
    }

    return totalWaiting / 5;
  }

  google.charts.setOnLoadCallback(calculate);
</script>

</body>
</html>
