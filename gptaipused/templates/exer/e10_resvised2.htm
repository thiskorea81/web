<!DOCTYPE html>
<html>
<head>
  <title>Round Robin Scheduler</title>
  <meta charset="UTF-8">
  
  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<style>
  table {
    font-family: arial, sans-serif;
    border-collapse: collapse;
    width: 100%;
    background-color: whitesmoke;
    text-align: left;
    font-size: 13px;
    color: gray;
  }
  
  td, th {
    border: 1px solid #dddddd;
    text-align: left;
    padding: 5px;
  }

  #ttitle {
    font-family: arial, sans-serif;
    width: 10%;
    background-color: gray;
    text-align: center;
    font-size: 15px;
    color: white;
  }
</style>
</head>
<body>

  <h2>Enter Process Details</h2>

  <div id="processContainer">
    <div id="P1">
      <label for="arrival1">P1 Arrival Time:</label>
      <input type="text" id="arrival1" value="0" size="5">
      <label for="burst1">P1 Burst Time:</label>
      <input type="text" id="burst1" value="10" size="5">
    </div>
  </div>
  
  <button onclick="addProcess()">Add Process</button>
  
  <h3>Enter Time Quantum</h3>
  <input type="text" id="timeQuantum" value="5" size="5">
  
  <button onclick="calculate()">Calculate</button>
  <button onclick="findBestQuantum()">Find Best Time Quantum</button>
  
  <h2>Results</h2>
  <table id="resultsTable">
    <tr>
      <th>프로세스 Process</th>
      <th>반환시간 Turnaround Time</th> 
      <th>대기시간 Waiting Time</th>
    </tr>
  </table>
  
  <div id="averages"></div>
  
  <h2>Calculation Details</h2>
  <div id="totalTimes"></div>
  <div id="calculationDetails"></div>
  
  <h2>Gantt Chart</h2>
  <div id="chart_div"></div>

  <script>
    // Load the Visualization API and the timeline package.
    google.charts.load('current', {'packages':['timeline']});
  
    // Variables to keep track of the number of processes and process IDs
    let processCount = 1;
    let processIDs = ['P1'];
  
    // Function to add a new process input field
    function addProcess() {
      processCount++;
      let processID = 'P' + processCount;
      processIDs.push(processID);
      let processContainer = document.getElementById('processContainer');
      let newProcessDiv = document.createElement('div');
      newProcessDiv.id = processID;
      newProcessDiv.innerHTML = `<label for="arrival${processCount}">${processID} Arrival Time:</label>
                                 <input type="text" id="arrival${processCount}" value="0" size="5">
                                 <label for="burst${processCount}">${processID} Burst Time:</label>
                                 <input type="text" id="burst${processCount}" value="10" size="5">`;
      processContainer.appendChild(newProcessDiv);
    }
  
    // Round Robin algorithm
    function calculate() {
      document.getElementById("resultsTable").innerHTML = "<tr><th>프로세스 Process</th><th>반환시간 Turnaround Time</th><th>대기시간 Waiting Time</th></tr>";
      document.getElementById("calculationDetails").innerHTML = "";
      document.getElementById("totalTimes").innerHTML = "";

      let timeQuantum = parseInt(document.getElementById("timeQuantum").value);
      let processes = [];
      let chartData = [];

      for (let i = 0; i < processCount; i++) {
        let arrival = parseInt(document.getElementById("arrival" + (i + 1)).value);
        let burst = parseInt(document.getElementById("burst" + (i + 1)).value);
        processes.push({name: processIDs[i], arrival: arrival, burst: burst, remaining: burst});
      }

      processes.sort((a, b) => a.arrival - b.arrival || a.name.localeCompare(b.name));

      let time = 0;
      let queue = [];
      let totalTurnaround = 0;
      let totalWaiting = 0;
      let executionStart = 0; 

      while (processes.length > 0 || queue.length > 0) {
        while (processes.length > 0 && processes[0].arrival <= time) {
          queue.push(processes.shift());
        }

        if (queue.length === 0) {
          time = processes[0].arrival;
          continue;
        }

        let process = queue.shift();
        let executionTime = Math.min(process.remaining, timeQuantum);
        let waiting = time - process.arrival;
        time += executionTime;
        executionStart = time - executionTime; 

        process.remaining -= executionTime;
        if (process.remaining > 0) {
          process.arrival = time;
          queue.push(process);
        } else {
          let turnaround = time - arrival + waiting;

          totalTurnaround += turnaround;
          totalWaiting += waiting;

          let resultsTable = document.getElementById("resultsTable");
          let row = resultsTable.insertRow(-1);
          let cell1 = row.insertCell(0);
          let cell2 = row.insertCell(1);
          let cell3 = row.insertCell(2);
          cell1.innerHTML = process.name;
          cell2.innerHTML = turnaround;
          cell3.innerHTML = waiting;
        }
        
        document.getElementById("calculationDetails").innerHTML += `<p>${process.name} : Start - ${executionStart}, End - ${time}, Waiting - ${waiting}</p>`;
        document.getElementById("totalTimes").innerHTML = `<p>Total Turnaround Time: ${totalTurnaround}, Total Waiting Time: ${totalWaiting}</p>`;
        chartData.push([process.name, new Date(0, 0, 0, 0, 0, executionStart), new Date(0, 0, 0, 0, 0, time)]);
      }

      let averageTurnaround = totalTurnaround / processCount;
      let averageWaiting = totalWaiting / processCount;
      document.getElementById("averages").innerHTML = "Average turnaround time: " + averageTurnaround + "<br>Average waiting time: " + averageWaiting;

      drawChart(chartData);
    }

  // Redraw chart when window is resized
  window.addEventListener('resize', function() {drawChart(chartData);});

  // Drawing chart with given data
  function drawChart(chartData) {
    var chart = new google.visualization.Timeline(document.getElementById('chart_div'));
    var dataTable = new google.visualization.DataTable();
    dataTable.addColumn({ type: 'string', id: 'Process' });
    dataTable.addColumn({ type: 'date', id: 'Start' });
    dataTable.addColumn({ type: 'date', id: 'End' });
    dataTable.addRows(chartData);

    var options = {
      height: 400,
      width: window.innerWidth-20,
      gantt: {
        trackHeight: 30
      }
    };
    chart.draw(dataTable, options);
  }

  // Find the best time quantum that minimizes the average waiting time
  function findBestQuantum() {
    var bestQuantum = 1;
    var bestAvgWaiting = Infinity;
    for (let quantum = 1; quantum <= 50; quantum++) {
      let avgWaiting = simulateRoundRobin(processes, quantum);
      if (avgWaiting < bestAvgWaiting) {
        bestAvgWaiting = avgWaiting;
        bestQuantum = quantum;
      }
    }
    document.getElementById("timeQuantum").value = bestQuantum;
    calculate();
  }

  // Simulation function used in finding the best quantum
  function simulateRoundRobin(inputProcesses, timeQuantum) {
    let processes = JSON.parse(JSON.stringify(inputProcesses)); // Process array copy
    let time = 0;
    let queue = [];
    let totalWaiting = 0;

    while (processes.length > 0 || queue.length > 0) {
      while (processes.length > 0 && processes[0].arrival <= time) {
        queue.push(processes.shift());
      }

      if (queue.length === 0) {
        time = processes[0].arrival;
        continue;
      }

      let process = queue.shift();
      let executionTime = Math.min(process.remaining, timeQuantum);
      let waiting = time - process.arrival;
      time += executionTime;

      process.remaining -= executionTime;
      if (process.remaining > 0) {
        process.arrival = time;
        queue.push(process);
      }
      else {
          totalWaiting += waiting;
      }
    }      

      return totalWaiting / processCount;
  }
</script>

</body>
</html>
